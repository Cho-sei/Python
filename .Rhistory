setwd("c:/Users/Lab/Documents/Python")
library(kernlab)
# ライブラリ呼び出し
library(kernlab)
# データ入力
train.data = read.csv("learn_data_B.csv",header = F)
test.data = read.csv("test_data.csv",header = F)
# 正解ラベル
Correct.label = test.data[,63]
# 列名操作
x = 1:62
colnames(train.data) = c(x,"y")
colnames(test.data) = c(x)
# ラベルを名義尺度に変更
train.data$y = as.factor(train.data$y)
# SVM判別モデルの作成
svm_model = ksvm(y~.,data=train.data)
# 判別結果
result = predict(svm_model,test.data)
table(Correct.label,result)
N = 10
C.candidate = exp(seq(log(100),log(0.1),length.out=20))
sigma.candidate = exp(seq(log(10),log(0.01),length.out=20))
N.C = length(C.candidate)
N.sigma = length(sigma.candidate)
CROSS = matrix(0,N.C,N.sigma)
for(i in 1:N.C){
for(j in 1:N.sigma){
C = C.candidate[i]
sigma = sigma.candidate[j]
fit = ksvm(y~.,data=train.data,kernel="rbfdot",sigma=sigma,C=C,cross=N)
CROSS[i,j] = fit@cross
}
}
index = which.min(CROSS)
index = arrayInd(index,.dim=c(20,20))
index_C = index[1]
index_sigma = index[2]
fit = ksvm(y~.,data=train.data, kernel="rbfdot",sigma=sigma.candidate[index_sigma],C=C.candidate[index_C],cross=N)
result = predict(fit,test.data)
table(Correct.label,result)
index
CROSS
fit
N = 5
C.candidate = exp(seq(log(100),log(0.1),length.out=20))
sigma.candidate = exp(seq(log(10),log(0.01),length.out=20))
N.C = length(C.candidate)
N.sigma = length(sigma.candidate)
CROSS = matrix(0,N.C,N.sigma)
for(i in 1:N.C){
for(j in 1:N.sigma){
C = C.candidate[i]
sigma = sigma.candidate[j]
fit = ksvm(y~.,data=train.data,kernel="rbfdot",sigma=sigma,C=C,cross=N)
CROSS[i,j] = fit@cross
}
}
index = which.min(CROSS)
index = arrayInd(index,.dim=c(20,20))
index_C = index[1]
index_sigma = index[2]
fit = ksvm(y~.,data=train.data, kernel="rbfdot",sigma=sigma.candidate[index_sigma],C=C.candidate[index_C],cross=N)
result = predict(fit,test.data)
table(Correct.label,result)
fit
result_learn = predict(fit,train.data)
table(Correct.label,result_learn)
result_learn
Correct.label = train.data[,63]
table(Correct.label,result_learn)
N = 5
N = 10
C.candidate = exp(seq(log(100),log(0.1),length.out=20))
sigma.candidate = exp(seq(log(10),log(0.01),length.out=20))
N.C = length(C.candidate)
N.sigma = length(sigma.candidate)
CROSS = matrix(0,N.C,N.sigma)
for(i in 1:N.C){
for(j in 1:N.sigma){
C = C.candidate[i]
sigma = sigma.candidate[j]
fit = ksvm(y~.,data=train.data,kernel="rbfdot",sigma=sigma,C=C,cross=N)
CROSS[i,j] = fit@cross
}
}
index = which.min(CROSS)
index = arrayInd(index,.dim=c(20,20))
index_C = index[1]
index_sigma = index[2]
fit = ksvm(y~.,data=train.data, kernel="rbfdot",sigma=sigma.candidate[index_sigma],C=C.candidate[index_C],cross=N)
result = predict(fit,test.data)
table(Correct.label,result)
Correct.label = test.data[,63]
table(Correct.label,result)
N = 5
C.candidate = exp(seq(log(100),log(0.1),length.out=20))
sigma.candidate = exp(seq(log(10),log(0.01),length.out=20))
N.C = length(C.candidate)
N.sigma = length(sigma.candidate)
CROSS = matrix(0,N.C,N.sigma)
for(i in 1:N.C){
for(j in 1:N.sigma){
C = C.candidate[i]
sigma = sigma.candidate[j]
fit = ksvm(y~.,data=train.data,kernel="rbfdot",sigma=sigma,C=C,cross=N)
CROSS[i,j] = fit@cross
}
}
index = which.min(CROSS)
index = arrayInd(index,.dim=c(20,20))
index_C = index[1]
index_sigma = index[2]
fit = ksvm(y~.,data=train.data, kernel="rbfdot",sigma=sigma.candidate[index_sigma],C=C.candidate[index_C],cross=N)
result = predict(fit,test.data)
table(Correct.label,result)
N = 20
C.candidate = exp(seq(log(100),log(0.1),length.out=20))
sigma.candidate = exp(seq(log(10),log(0.01),length.out=20))
N.C = length(C.candidate)
N.sigma = length(sigma.candidate)
CROSS = matrix(0,N.C,N.sigma)
for(i in 1:N.C){
for(j in 1:N.sigma){
C = C.candidate[i]
sigma = sigma.candidate[j]
fit = ksvm(y~.,data=train.data,kernel="rbfdot",sigma=sigma,C=C,cross=N)
CROSS[i,j] = fit@cross
}
}
index = which.min(CROSS)
index = arrayInd(index,.dim=c(20,20))
index_C = index[1]
index_sigma = index[2]
fit = ksvm(y~.,data=train.data, kernel="rbfdot",sigma=sigma.candidate[index_sigma],C=C.candidate[index_C],cross=N)
result = predict(fit,test.data)
table(Correct.label,result)
# ライブラリ呼び出し
library(MASS)
# データ入力
train.data = read.csv("learn_data_B.csv",header=F)
test.data = read.csv("test_data.csv",header=F)
# 正解ラベル
correct.label = test.data[,63]
# 列名操作
x = 1:62
colnames(train.data) = c(x,"y")
colnames(test.data) = c(x)
# 判別モデル作成
Z = lda(y~.,data=train.data)
# 検定データの判別結果
Y = predict(Z,test.data)
table(test.data[,63],Y$class)
# 学習データの判別結果
table(train.data[,63],predict(Z)$class)
plot(Z,dimen=1)
# ライブラリ呼び出し
library(MASS)
# データ入力
train.data = read.csv("learn_data_B.csv",header=F)
test.data = read.csv("test_data.csv",header=F)
# 正解ラベル
correct.label = test.data[,63]
# 列名操作
x = 1:62
colnames(train.data) = c(x,"y")
colnames(test.data) = c(x)
# 判別モデル作成
Z = lda(y~.,data=train.data)
# 検定データの判別結果
Y = predict(Z,test.data)
table(test.data[,63],Y$class)
# 学習データの判別結果
table(train.data[,63],predict(Z)$class)
plot(Z,dimen=1)
# ライブラリ呼び出し
library(kernlab)
# データ入力
train.data = read.csv("learn_data_B.csv",header = F)
test.data = read.csv("test_data.csv",header = F)
# 正解ラベル
Correct.label = test.data[,63]
# 列名操作
x = 1:62
colnames(train.data) = c(x,"y")
colnames(test.data) = c(x)
# ラベルを名義尺度に変更
train.data$y = as.factor(train.data$y)
# SVM判別モデルの作成
svm_model = ksvm(y~.,data=train.data)
# 判別結果
result = predict(svm_model,test.data)
table(Correct.label,result)
N = 5
C.candidate = exp(seq(log(100),log(0.1),length.out=20))
sigma.candidate = exp(seq(log(10),log(0.01),length.out=20))
N.C = length(C.candidate)
N.sigma = length(sigma.candidate)
CROSS = matrix(0,N.C,N.sigma)
for(i in 1:N.C){
for(j in 1:N.sigma){
C = C.candidate[i]
sigma = sigma.candidate[j]
fit = ksvm(y~.,data=train.data,kernel="rbfdot",sigma=sigma,C=C,cross=N)
CROSS[i,j] = fit@cross
}
}
index = which.min(CROSS)
index = arrayInd(index,.dim=c(20,20))
index_C = index[1]
index_sigma = index[2]
fit = ksvm(y~.,data=train.data, kernel="rbfdot",sigma=sigma.candidate[index_sigma],C=C.candidate[index_C],cross=N)
result = predict(fit,test.data)
table(Correct.label,result)
N = 10
C.candidate = exp(seq(log(100),log(0.1),length.out=20))
sigma.candidate = exp(seq(log(10),log(0.01),length.out=20))
N.C = length(C.candidate)
N.sigma = length(sigma.candidate)
CROSS = matrix(0,N.C,N.sigma)
for(i in 1:N.C){
for(j in 1:N.sigma){
C = C.candidate[i]
sigma = sigma.candidate[j]
fit = ksvm(y~.,data=train.data,kernel="rbfdot",sigma=sigma,C=C,cross=N)
CROSS[i,j] = fit@cross
}
}
index = which.min(CROSS)
index = arrayInd(index,.dim=c(20,20))
index_C = index[1]
index_sigma = index[2]
fit = ksvm(y~.,data=train.data, kernel="rbfdot",sigma=sigma.candidate[index_sigma],C=C.candidate[index_C],cross=N)
result = predict(fit,test.data)
table(Correct.label,result)
q()
